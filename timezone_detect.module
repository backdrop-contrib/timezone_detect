<?php
/**
 * @file
 * Module provides automatic timezone detection via javascript.
 */

/**
 * Load constants.
 */
require_once 'timezone_detect.constants.inc';

/**
 * Implements hook_menu().
 */
function timezone_detect_menu() {

  // Admin settings.
  $items['admin/config/regional/timezone_detect'] = array(
    'title' => 'Timezone Detect',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('timezone_detect_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure timezone detection settings.',
    'file' => 'timezone_detect.admin.inc',
  );

  $items['admin/config/regional/timezone_detect/admin'] = array(
    'title' => 'Timezone Detect',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Ajax callback function to set current user's timezone.
  $items['timezone-detect/ajax/set-timezone'] = array(
    'title' => 'Update session timezone',
    'page callback' => 'timezone_detect_set_timezone',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_library_info().
 */
function timezone_detect_library_info() {
  $path = backdrop_get_path('module', 'timezone_detect');
  return array(
    'jstz' => array(
      'title' => t('jsTimezoneDetect'),
      'website' => TIMEZONE_DETECT_LIBRARY_WEBSITE,
      'version' => '1.0.7',
      'js' => array(
        $path . '/library/' . TIMEZONE_DETECT_LIBRARY_FILENAME => array(),
      ),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function timezone_detect_config_info() {
  $prefixes['timezone_detect.settings'] = array(
    'label' => t('Timezone Detect settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_block_info().
 */
function timezone_detect_block_info() {
  $blocks['timezone_detect_current_timezone'] = array(
    'info' => t('Current Timezone'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function timezone_detect_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'timezone_detect_current_timezone':
      $block['subject'] = t('Current Timezone');
      $block['content'] = timezone_detect_current_timezone_display();
      break;
  }
  return $block;
}

/**
  * Display the user's current timezone.
  */
function timezone_detect_current_timezone_display() {
  global $user;
  $timezone = timezone_detect_current_timezone_fetch();
  $output = "<div class='messages info'>";
  if ($user->uid > 0) {
    // User is logged in.
    $output .= t("All times below are shown based on your profile's current timezone, <strong>@timezone</strong>. You can set a different timezone in your profile.", array(
      '@timezone' => $timezone,
    ));
  }
  else {
    // User is not logged in -- may use session variable in the future.
    $output .= t("<strong>NOTE:</strong> If you are not yet registered for the conference, all times below are set according to the default timezone: <strong>@timezone</strong>. Once registered, participants may set the time zone in their profile so that the schedule is displayed according to their local time.", array(
      '@timezone' => $timezone,
    ));
  }
  $output .= "</div>";
  return $output;
}

/**
  * Fetch the user's current timezone. Returns timezone as plain text.
  */
function timezone_detect_current_timezone_fetch() {
  global $user;
  $user_configurable_timezones = config_get('system.date', 'user_configurable_timezones');
  $timezone = NULL;
  if ($user->uid > 0 && $user_configurable_timezones && !empty($user->timezone)) {
    // User is logged in.
    $timezone = $user->timezone;
  }
  else {
    // User has not or can not configure their own timezone, or they are not
    // logged in, so we will use default site timezone.
    // We may use a session variable in the future. See https://github.com/backdrop/backdrop-issues/issues/4612
    $timezone = config_get('system.date', 'default_timezone');
  }
  return $timezone;
}

/**
 * Implements hook_user_login().
 */
function timezone_detect_user_login(&$edit, $account) {
  if (config_get('timezone_detect.settings', 'mode') == TIMEZONE_DETECT_MODE_LOGIN || empty($account->timezone)) {
    // Set session flag to update user's timezone. Note that we cannot add the
    // js directly from this function, as the user is redirected after this
    // hook fires.
    $_SESSION['timezone_detect']['update_timezone'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function timezone_detect_preprocess_page(&$page) {
  // Include the javascript only when appropriate.
  if (isset($_SESSION['timezone_detect']['update_timezone']) || (!user_is_anonymous() && config_get('timezone_detect.settings', 'mode') === TIMEZONE_DETECT_MODE_ALWAYS)) {
    timezone_detect_add_js();
  }
}

/**
 * AJAX callback function to set current user's timezone.
 */
function timezone_detect_set_timezone() {
  global $user;

  // If they are logged in, set some data.
  if (!user_is_anonymous()) {
    // Check for $_POST data.
    // Timezone should be an IANA/Olson timezone id provided via $_POST.
    if (!isset($_POST['timezone'])) {
      watchdog('timezone_detect', 'Attempting to set timezone for user @uid, but no timezone found in $_POST data; aborting.', array('@uid' => $user->uid), WATCHDOG_ERROR);
      return '';
    }
    // Make sure we have a valid session token to prevent cross-site request forgery.
    if (!isset($_POST['token']) || !backdrop_valid_token($_POST['token'])) {
      watchdog('timezone_detect', 'Attempting to set timezone for user @uid, but session token in $_POST data is empty or invalid; aborting.', array('@uid' => $user->uid), WATCHDOG_ERROR);
      return '';
    }

    $timezone = check_plain($_POST['timezone']);

    // Keep track of the last submitted timezone in case it's not valid so that
    // we don't keep POSTing it on every request.
    $_SESSION['timezone_detect']['current_timezone'] = $timezone;

    // Check valid timezone id.
    $zone_list = timezone_identifiers_list();
    if (!in_array($timezone, $zone_list)) {
      watchdog('timezone_detect', 'Attempting to set timezone for user @uid to @timezone, but that does not appear to be a valid timezone id; aborting.', array('@uid' => $user->uid, '@timezone' => $timezone), WATCHDOG_ERROR);
      return '';
    }

    // Save timezone to account.
    $account = user_load($user->uid);
    $account->timezone = $timezone;
    user_save($account);
    if (config_get('timezone_detect.settings', 'success_watchdog')) {
      watchdog('timezone_detect', 'Set timezone for user @uid to @timezone.', array('@uid' => $user->uid, '@timezone' => $timezone));
    }
  }

  // Unset session flag regarldess of whether they are logged in or not to avoid
  // repeated attempts at this process that are likely to fail.
  unset($_SESSION['timezone_detect']['update_timezone']);
}

/**
 * Add the Javascript that will update the user's timezone via AJAX callback.
 */
function timezone_detect_add_js() {
  $added = &backdrop_static(__FUNCTION__, FALSE);
  if (!$added) {
    // Add library js.
    backdrop_add_library('timezone_detect', 'jstz');

    // Add helper js.
    $helper_js = backdrop_get_path('module', 'timezone_detect') . '/js/timezone_detect.js';
    backdrop_add_js($helper_js);

    // Store the current timezone for comparison.
    $timezone = '';
    if (!empty($_SESSION['timezone_detect']['current_timezone'])) {
      $timezone = $_SESSION['timezone_detect']['current_timezone'];
    }
    elseif (!empty($GLOBALS['user']->timezone)) {
      $timezone = $GLOBALS['user']->timezone;
    }

    // Create and pass token to prevent cross-site request forgery.
    $token = backdrop_get_token();

    // Add these items as js settings.
    $setting = array(
      'timezone_detect' => array(
        'current_timezone' => $timezone,
        'token' => $token,
      ),
    );
    backdrop_add_js($setting, 'setting');

    // Mark as added so we don't do it again.
    $added = TRUE;
  }
}
