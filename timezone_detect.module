<?php
/**
 * @file
 * Automatic timezone detection for new users via javascript.
 */

// jsTimezeDetect library information.
define('TIMEZONE_DETECT_LIBRARY_WEBSITE', 'http://pellepim.bitbucket.org/jstz/');
define('TIMEZONE_DETECT_LIBRARY_FILENAME', 'jstz.js');
define('TIMEZONE_DETECT_LIBRARY_DOWNLOAD_URL', 'https://bitbucket.org/pellepim/jstimezonedetect/raw/default/jstz.js');

/**
 * Implements hook_menu().
 */
function timezone_detect_menu() {

  // Admin settings.
  $items['admin/config/regional/timezone_detect'] = array(
    'title' => 'Timezone Detect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timezone_detect_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure settings for Timezone Detect.',
    'file' => 'timezone_detect.admin.inc',
  );

  $items['admin/config/regional/timezone_detect/admin'] = array(
    'title' => 'Timezone Detect',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Library information
  $items['admin/config/regional/timezone_detect/library_info'] = array(
    'title' => 'Library information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timezone_detect_library_info_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure library information for Timezone Detect.',
    'file' => 'timezone_detect.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Ajax callback function to set current user's timezone.
  $items['timezone-detect/set-timezone'] = array(
    'title' => 'Update session timezone',
    'page callback' => 'timezone_detect_set_timezone',
    'access callback' => 'timezone_detect_set_timezone_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function timezone_detect_libraries_info() {
  return array(
    'jstimezonedetect' => array(
      'name' => t('jsTimezoneDetect'),
      'vendor url' => variable_get('timezone_detect_library_website', TIMEZONE_DETECT_LIBRARY_WEBSITE),
      'download url' => variable_get('timezone_detect_library_download_url', TIMEZONE_DETECT_LIBRARY_DOWNLOAD_URL),
      'version arguments' => array(
        'file' => variable_get('timezone_detect_library_filename', TIMEZONE_DETECT_LIBRARY_FILENAME),
        // Patern matches, for example: @version 0.10.0.
        'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      ),
      'files' => array(
        'js' => array(
          variable_get('timezone_detect_library_filename', TIMEZONE_DETECT_LIBRARY_FILENAME),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_user_login().
 */
function timezone_detect_user_login(&$edit, $account) {
  $update_timezone_every_login = variable_get('timezone_detect_update_timezone_every_login', 0);
  if ($update_timezone_every_login || empty($account->timezone)) {
    // Set session flag to update user's timezone. Note that we cannot add the
    // js directly from this function, as the user is redirected after this
    // hook fires.
    $_SESSION['timezone_detect']['update_timezone'] = TRUE;
  }
}

/**
 * Implements hook_page_alter().
 */
function timezone_detect_page_alter(&$page) {
  // Update user's timezone if session flag is set.
  if (isset($_SESSION['timezone_detect']['update_timezone'])) {
    // Add javascript that will update the user's timezone via ajax callback.
    timezone_detect_add_js();
  }
}

/**
 * Ajax callback function to set current user's timezone.
 */
function timezone_detect_set_timezone() {
  global $user;

  // Check for $_POST data.
  // Timezone should be an IANA/Olson timezone id provided via $_POST.
  if (!isset($_POST['timezone'])) {
    watchdog('timezone_detect', 'Attempting to set timezone for user @uid, but no timezone found in $_POST data; aborting.', array('@uid' => $user->uid), WATCHDOG_ERROR);
    drupal_set_message(t('An error has occured while attempting to set your timezone.'), 'error');
    return '';
  }
  $timezone = check_plain($_POST['timezone']);

  // Check valid timezone id.
  $zone_list = timezone_identifiers_list();
  if (!in_array($timezone, $zone_list)) {
    watchdog('timezone_detect', 'Attempting to set timezone for user @uid to @timezone, but that does not appear to be a valid timezone id; aborting.', array('@uid' => $user->uid, '@timezone' => $timezone), WATCHDOG_ERROR);
    drupal_set_message(t('An error has occured while attempting to set your timezone.'), 'error');
    return '';
  }

  // Save timezone to account.
  $account = user_load($user->uid);
  $edit['timezone'] = $timezone;
  user_save($account, $edit);
  watchdog('timezone_detect', 'Set timezone for user @uid to @timezone.', array('@uid' => $user->uid, '@timezone' => $timezone));

  // Unset session flag.
  unset($_SESSION['timezone_detect']['update_timezone']);
}

/**
 * Access callback for timezone_detect_set_timezone().
 */
function timezone_detect_set_timezone_access() {
  global $user;

  // Don't let anonymous users access.
  if (empty($user->uid)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Add the javascript that will update the user's timezone via ajax callback.
 */
function timezone_detect_add_js() {
  // Add helper js.
  $helper_js = drupal_get_path('module', 'timezone_detect') . '/timezone_detect.js';
  drupal_add_js($helper_js);

  // Add library js.
  if (module_exists('libraries')) {
    libraries_load('jstimezonedetect');
  }
  else {
    // If libraries modules does not exist, look in local module folder.
    $library_js = drupal_get_path('module', 'timezone_detect') . '/' . variable_get('timezone_detect_library_filename', TIMEZONE_DETECT_LIBRARY_FILENAME);
    drupal_add_js($library_js);
  }
}
